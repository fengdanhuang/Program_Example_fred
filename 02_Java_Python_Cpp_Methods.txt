
=======================================================================
Java Integer
	Constant:
    		Integer.MIN_VALUE: 2147483647
    		Integer.MAX_VALUE: -2147483648
		
	Static Method:
	        Integer.parseInt("25")
=======================================================================
Java char 
        Declare:
		char ch = 'a';
    	Loop over char array:
        	for(char ch:str.toCharArray()){
========================================================================
Java Character	
	Attributes:
        
	Static Methods:
		Character.isDigit(chr)
		Charactoer.isLetter(chr)
                Character.isLetterOrDigit(chr)
======================================================================
Java Arrays Class
        Static Methods:
		Arrays.sort([Array])
		Arrays.fill([Array], 1);
		Arrays.asList("0", "1", "8")
		Arrays.binarySearch(dp, 0, len, num)
======================================================================
Java Array	
	Declare:	
		int[] nums = new int[10];	
	Attributes:
		nums.length
	Loop over elements in Array:
		for (int i=0; i<[Array].length; i++) {}
		for (int i: [Array]) {}	
	Robust Check:
		if (nums.length == 0) return 0;
		if (nums == null || nums.length == 0) {return 0;}
=======================================================================
Java String	

	Declare:
		String str = "abc";
		String str = new String("abc");
		
	Methods:
		str.length()
		str.equals(str)
		str.toCharArray()
		str.charAt([int])
             	str.isEmpty()
	        str.indexOf()
		str.replaceAll()
		str.toUpperCase()
		str.startsWith(strb, i) ->
		str.substring(i, j) ->
		str.split("\\s+") -> String[] re
		str.trim()
	Static Methods:
	        String.format("%02d:%02d", ans / 60, ans % 60)
		String.valueOf(i) -> String re
	Loop over characters in String:
		for(int i=0; i<s.length(); i++){}

	Robust Check:
		if (s == null || s.length() == 0) {return 0;}
=======================================================================
Java StringBuilder

	Declare:
		StringBuilder sb = new StringBuilder();
		String str = new String("abc");
	Methodsï¼š
		sb.append(str)
		sb.toString()
		sb.reverse()
		sb.length()
		sb.insert(i, '-')
=======================================================================
Java Stack

	Declare:
		Stack stk = new Stack();
		int i = 10;
	Methods:
		stk.push(i)
		stk.pop(i)

	Loop Over Stack:
		for(int i:stk){}
=======================================================================
Java Queue (Interface)
   
       Declare:
               Queue<TreeNode> q = new LinkedList<>();
       Methods:
               q.add(root);
	       q.isEmpty() -> Boolean re
	       q.poll() -> Object re (Remove head)
	       q.remove() -> Object re (Basically same as poll())
	       q.peek() -> Object re (Don't remove head)
	       q.size() -> int size	       
=======================================================================
Java Deque 
      
       Declare:
               Deque<String> dq = new LinkedList<>();
       Methods:
               dq.addAll(Arrays.asList(data.split(spliter)));
=======================================================================
Java HashSet

	Declare:
		HashSet<Character> set = new HashSet<>();
		char ch = 'a';
	Methods: 
		set.size()
		set.add(ch)
		set.contains(ch)
	
	Loop Over HashSet:
		for (char ch:set) {}
=======================================================================
Java HashMap

	Declare:
		HashMap<Character, Integer> map = new HashMap<>();
		char key = 'k';
		int i = 2;
	Methods:
		map.containsKey()
		map.put(key,i)
		map.get(key)
                map.keySet()
	Loop Over HashMap:	
	        for (int key:map.keySet()){
		
		}
=======================================================================
Java ArrayList

	Declare:
		ArrayList<Integer> al = new ArrayList<>();
	Methods:
		al.size()
		al.get([int])
		al.add(new Interval(begin[i-1], end[i-1]))
		al.addAll(bucket[i]);
=======================================================================
Java LinkedList

        Declare:
	        LinkedList<Integer> lk = new LinkedList<>();
	Methods:
	        
=======================================================================
Java Math
	
	Static Methods:
		Math.abs([int])
		Math.max([int], [int])
		Math.floor()
=======================================================================
Python Function

	Xrange(A,B)
	abs()
	int()
	str()
